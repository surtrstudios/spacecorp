task init() {
	description = "Initializes the development environment."
	group = 'Initialize'
} << {
	def os = System.getProperty("os.name").toLowerCase()

	if (os.contains("windows")) {
		println "Initializing windows environment."

		def mklink = "cmd /C mklink /J .git\\hooks\\pre-commit hooks\\pre-commit.py"
		println mklink
		def mklinkProc = mklink.execute()
		mklinkProc.waitFor()
	} else {
		println "Initializing unix environment."

		def chmod = "chmod gua+x ./hooks/pre-commit.py"
		def chmodProc = chmod.execute()
		chmodProc.waitFor()

		def cmd = "ln -s -f ../../hooks/pre-commit.py ./.git/hooks/pre-commit"
		def proc = cmd.execute()
		proc.waitFor()
	}
}

task wrapper(type: Wrapper) {
	description = 'Generates the gradle wrapper which ensures a consistent configuration for all users.'
	group = 'Initialize'
	gradleVersion = '1.5'
}

task all(dependsOn: ':android:all') {
	description = "Assemble and publish all configurations for all platforms."
	group = "Build"
} << {
	new File("build").mkdirs()
}

task debug(dependsOn: ':android:debug') {
	description = "Assemble and publish the debug configuration for all platforms"
	group = "Build"
}

task release(dependsOn: ':android:release') {
	description = "Assemble and publish the release configuration for all platforms"
	group = "Build"
}

task clean {
	description = 'Cleans build artifacts from local system'
}<< {
	new File("build").deleteDir()
}

task rebuild(dependsOn: all) {
	group = "Build"
	doFirst {
		new File("build").deleteDir()
	}
}

