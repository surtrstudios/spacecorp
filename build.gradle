class CompileAndroid extends Exec {
	def List<String> includes = ['include']
	def String configuration = 'debug'
	def List<String> defines = ['ANDROID']
	def String outputDirectory = 'build/android-gcc-' + configuration + "/"
	def String outptuFile = 'spacecorp'

	public CompileAndroid() {
		super()
		this.setWorkingDir(".")
	}

	private void updateArgs() {
		outputDirectory = 'build/android-gcc-' + configuration +"/"
		new File(outputDirectory).mkdirs()

		cmd = ["gcc"]

		this.includes.each { include -> 
			cmd.add('-I')
			cmd.add(include)
		}

		this.defines.each { define -> 
			cmd.add('-D')
			cmd.add(define)
		}

		cmd.add('source/main.c')
		cmd.add('-o')
		cmd.add(outputDirectory + outptuFile)

		commandLine cmd
	}

	void includes(String... value) {
		this.includes = value.toList()
		this.updateArgs()
	}

	void setConfiguration(String value) {
		this.configuration = value
		this.updateArgs()
	}

	void defines(String... value) {
		this.defines = value.toList()
		this.updateArgs()
	}
}

task compileAndroidDebug(type: CompileAndroid) {
	includes 'include'
	configuration'debug'
	defines 'ANDROID', 'DEBUG'

	standardOutput = new ByteArrayOutputStream()

	ext.taskOutput = {
		return standardOutput.toString()
	}
}

task compileAndroidRelease(type: CompileAndroid) {
	includes 'include'
	configuration 'release'
	defines 'ANDROID', 'RELEASE'

	standardOutput = new ByteArrayOutputStream()

	ext.taskOutput = {
		return standardOutput.toString()
	}
}

task android(dependsOn: [compileAndroidDebug, compileAndroidRelease]) {
	description = 'Compiles all configurations for the android platform'
}

task compileAll(dependsOn: [compileAndroidDebug, compileAndroidRelease]) {
	ext.taskOutput = {
		compileAndroidDebug.taskOutput
	}
}

task all(dependsOn: compileAll) {
	description = 'Compiles for all platforms and configurations.'
} << {
	println compileAll.taskOutput
}

task clean {
	description = 'Cleans build artifacts from local system'
}<< {
	new File("build").deleteDir()
}